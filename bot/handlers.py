import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.game_service import search_game, get_game_details
from services.price_tracker import get_current_discounts
from data.data_manager import add_subscription, remove_subscription, get_user_subscriptions, update_user_info
from flask import current_app

# Set up logging
logging.basicConfig(level=logging.DEBUG, 
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Command handlers
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a welcome message when the command /start is issued."""
    user = update.effective_user
    
    # Save user info to database
    with current_app.app_context():
        try:
            update_user_info(
                user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            logger.info(f"User data saved to database: {user.id}")
        except Exception as e:
            logger.error(f"Error saving user data: {e}")
    
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! üëã\n\n"
        "–Ø –±–æ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∫–∏–¥–æ–∫ –Ω–∞ –∏–≥—Ä—ã. –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–Ω–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ —Ç–≤–æ–∏ –ª—é–±–∏–º—ã–µ –∏–≥—Ä—ã "
        "–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –º–∞–≥–∞–∑–∏–Ω–∞—Ö.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send a message when the command /help is issued."""
    help_text = (
        "–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n\n"
        "/search <–Ω–∞–∑–≤–∞–Ω–∏–µ_–∏–≥—Ä—ã> - –ü–æ–∏—Å–∫ –∏–≥—Ä—ã\n"
        "/subscribe <id_–∏–≥—Ä—ã> - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–Ω–µ\n"
        "/unsubscribe <id_–∏–≥—Ä—ã> - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/mysubs - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫\n"
        "/discounts - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Å–∫–∏–¥–∫–∏\n"
        "/filter price <–º–∞–∫—Å_—Ü–µ–Ω–∞> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ\n"
        "/filter discount <–º–∏–Ω_—Å–∫–∏–¥–∫–∞> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–∫–∏–¥–∫–µ\n"
        "/filter clear - –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await update.message.reply_text(help_text)

async def search_games(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Search for games when the command /search is issued."""
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–≥—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞. –ü—Ä–∏–º–µ—Ä: /search Witcher 3")
        return
    
    query = ' '.join(context.args)
    await update.message.reply_text(f"–ò—â—É: {query}...")
    
    try:
        results = await search_game(query)
        
        if not results:
            await update.message.reply_text(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–≥—Ä –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
            return
        
        # Create reply with inline buttons for each result
        reply_text = "üéÆ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:\n\n"
        keyboard = []
        
        for idx, game in enumerate(results[:5]):  # Limit to 5 results to avoid message size limits
            game_id = game.get('id')
            game_name = game.get('name')
            
            reply_text += f"{idx+1}. {game_name} (ID: {game_id})\n"
            
            # Add button to subscribe and view details
            keyboard.append([
                InlineKeyboardButton(f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {game_name}", callback_data=f"sub_{game_id}"),
                InlineKeyboardButton(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", callback_data=f"details_{game_id}")
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(reply_text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error in search_games: {e}")
        await update.message.reply_text(f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def subscribe_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Subscribe to price alerts for a game."""
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∏–≥—Ä—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ ID –∏–≥—Ä.")
        return
    
    game_id = context.args[0]
    user_id = update.effective_user.id
    
    try:
        # Get game details first to verify it exists
        game_details = await get_game_details(game_id)
        
        if not game_details:
            await update.message.reply_text(f"–ò–≥—Ä–∞ —Å ID {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
        
        # Add subscription with app context
        with current_app.app_context():
            # Get thumbnail if available
            thumbnail = game_details.get('thumbnail', None)
            success = add_subscription(user_id, game_id, game_details.get('name', 'Unknown Game'), thumbnail)
        
            if success:
                await update.message.reply_text(
                    f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–Ω–µ –¥–ª—è –∏–≥—Ä—ã {game_details.get('name')}.\n"
                    f"–Ø —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ —Å–Ω–∏–∑–∏—Ç—Å—è!"
                )
            else:
                await update.message.reply_text(f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∏–≥—Ä—É.")
            
    except Exception as e:
        logger.error(f"Error in subscribe_game: {e}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def unsubscribe_game(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Unsubscribe from price alerts for a game."""
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∏–≥—Ä—ã, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /mysubs, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")
        return
    
    game_id = context.args[0]
    user_id = update.effective_user.id
    
    try:
        # Remove subscription with app context
        with current_app.app_context():
            success, game_name = remove_subscription(user_id, game_id)
        
            if success:
                await update.message.reply_text(f"‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–Ω–µ –¥–ª—è –∏–≥—Ä—ã {game_name}.")
            else:
                await update.message.reply_text("–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∏–≥—Ä—É.")
            
    except Exception as e:
        logger.error(f"Error in unsubscribe_game: {e}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def list_subscriptions(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """List all subscribed games for the user."""
    user_id = update.effective_user.id
    
    try:
        # Get subscriptions with app context
        with current_app.app_context():
            subscriptions = get_user_subscriptions(user_id)
        
            if not subscriptions:
                await update.message.reply_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∏–≥—Ä—ã.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∏—Ö!"
                )
                return
            
            reply_text = "üéÆ –í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–≥—Ä—ã:\n\n"
            keyboard = []
            
            for game_id, game_info in subscriptions.items():
                game_name = game_info.get('name', 'Unknown Game')
                reply_text += f"‚Ä¢ {game_name} (ID: {game_id})\n"
                
                # Add button to unsubscribe
                keyboard.append([
                    InlineKeyboardButton(f"–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç {game_name}", callback_data=f"unsub_{game_id}")
                ])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(reply_text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error in list_subscriptions: {e}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def check_discounts(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show current game discounts."""
    await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—è—é —Ç–µ–∫—É—â–∏–µ —Å–∫–∏–¥–∫–∏ –Ω–∞ –∏–≥—Ä—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
    
    try:
        max_price = context.user_data.get('max_price')
        min_discount = context.user_data.get('min_discount')
        
        discounts = await get_current_discounts(
            max_price=max_price,
            min_discount=min_discount
        )
        
        if not discounts:
            await update.message.reply_text("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∫–∏–¥–æ–∫. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ!")
            return
        
        reply_text = "üî• –¢–µ–∫—É—â–∏–µ –≥–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:\n\n"
        keyboard = []
        
        for game in discounts[:10]:  # Limit to 10 games to avoid message size limits
            game_id = game.get('id')
            game_name = game.get('name')
            discount = game.get('discount_percent', 0)
            current_price = game.get('price_current', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            original_price = game.get('price_original', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            store = game.get('store', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω')
            
            reply_text += (f"üéÆ {game_name}\n"
                         f"üí∞ {current_price} (–±—ã–ª–æ {original_price}, -{discount}%)\n"
                         f"üè™ {store}\n\n")
            
            # Add button to subscribe
            keyboard.append([
                InlineKeyboardButton(f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {game_name}", callback_data=f"sub_{game_id}"),
                InlineKeyboardButton(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏", callback_data=f"details_{game_id}")
            ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(reply_text, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error in check_discounts: {e}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–∏—Ö —Å–∫–∏–¥–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle button presses from inline keyboards."""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    try:
        if data.startswith('sub_'):
            game_id = data[4:]
            user_id = update.effective_user.id
            
            # Get game details
            game_details = await get_game_details(game_id)
            
            if not game_details:
                await query.edit_message_text(text=f"–ò–≥—Ä–∞ —Å ID {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∏–≥—Ä—É.")
                return
            
            # Add subscription with app context
            with current_app.app_context():
                # Get thumbnail if available
                thumbnail = game_details.get('thumbnail', None)
                success = add_subscription(user_id, game_id, game_details.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞'), thumbnail)
            
                if success:
                    await query.edit_message_text(
                        text=f"‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ü–µ–Ω–µ –¥–ª—è –∏–≥—Ä—ã {game_details.get('name')}.\n"
                             f"–Ø —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å, –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ —Å–Ω–∏–∑–∏—Ç—Å—è!"
                    )
                else:
                    await query.edit_message_text(text=f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∏–≥—Ä—É.")
                
        elif data.startswith('unsub_'):
            game_id = data[6:]
            user_id = update.effective_user.id
            
            # Remove subscription with app context
            with current_app.app_context():
                success, game_name = remove_subscription(user_id, game_id)
            
                if success:
                    await query.edit_message_text(text=f"‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–Ω–µ –¥–ª—è –∏–≥—Ä—ã {game_name}.")
                else:
                    await query.edit_message_text(text="–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç—É –∏–≥—Ä—É.")
                
        elif data.startswith('details_'):
            game_id = data[8:]
            
            # Get game details
            game_details = await get_game_details(game_id)
            
            if not game_details:
                await query.edit_message_text(text=f"–ò–≥—Ä–∞ —Å ID {game_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –∏–≥—Ä—É.")
                return
            
            # Format game details message
            game_name = game_details.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∏–≥—Ä–∞')
            stores = game_details.get('stores', [])
            prices = game_details.get('prices', {})
            
            details_text = f"üéÆ {game_name}\n\n"
            
            if 'description' in game_details:
                # Truncate description if it's too long
                description = game_details['description']
                if len(description) > 200:
                    description = description[:197] + "..."
                details_text += f"üìù {description}\n\n"
            
            details_text += "üí∞ –¶–µ–Ω—ã:\n"
            
            for store_name, price_info in prices.items():
                current_price = price_info.get('current', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                original_price = price_info.get('original', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                discount = price_info.get('discount_percent', 0)
                
                if discount > 0:
                    details_text += f"üè™ {store_name}: {current_price} (–±—ã–ª–æ {original_price}, -{discount}%)\n"
                else:
                    details_text += f"üè™ {store_name}: {current_price}\n"
            
            # Add button to subscribe
            keyboard = [[InlineKeyboardButton(f"–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ {game_name}", callback_data=f"sub_{game_id}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text=details_text, reply_markup=reply_markup)
            
    except Exception as e:
        logger.error(f"Error in button_handler: {e}")
        await query.edit_message_text(text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Log errors caused by updates."""
    logger.error(f"Update {update} caused error {context.error}")
    
    # Notify user of error
    if update.effective_message:
        await update.effective_message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def handle_filters(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle price and discount filters"""
    if not context.args or len(context.args) < 1:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/filter price <–º–∞–∫—Å_—Ü–µ–Ω–∞> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É\n"
            "/filter discount <–ø—Ä–æ—Ü–µ–Ω—Ç> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å–∫–∏–¥–∫—É\n"
            "/filter clear - –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"
        )
        return

    filter_type = context.args[0].lower()
    
    if filter_type == "clear":
        context.user_data.clear()
        await update.message.reply_text("‚úÖ –í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")
        return
        
    if len(context.args) < 2:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞")
        return

    try:
        value = float(context.args[1])
        if filter_type == "price":
            if value <= 0:
                await update.message.reply_text("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
                return
            context.user_data['max_price'] = value
            await update.message.reply_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ: –¥–æ ${value:.2f}")
            
        elif filter_type == "discount":
            if not 0 <= value <= 100:
                await update.message.reply_text("–°–∫–∏–¥–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 0 –¥–æ 100%")
                return
            context.user_data['min_discount'] = value
            await update.message.reply_text(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å–∫–∏–¥–∫–µ: –æ—Ç {value}%")
            
        else:
            await update.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'price' –∏–ª–∏ 'discount'")
            
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
